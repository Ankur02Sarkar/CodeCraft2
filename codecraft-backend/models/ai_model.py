import os
from dotenv import load_dotenv
import google.generativeai as genai

load_dotenv()

# Configure the API key
api_key = os.getenv("GEMINI_API_KEY")
if not api_key:
    raise ValueError("GEMINI_API_KEY environment variable is required")

genai.configure(api_key=api_key)

# Create the model with generation config
model = genai.GenerativeModel(
    model_name="gemini-2.0-flash",
    generation_config={
        "temperature": 1,
        "top_p": 0.95,
        "top_k": 40,
        "max_output_tokens": 8192,
    }
)

# Chat session for general use
chat_session = model.start_chat(history=[])

# Chat session for code generation
class GenAICodeClass:
    def __init__(self):
        # Create a separate model for code generation with JSON response
        self.code_model = genai.GenerativeModel(
            model_name="gemini-2.0-flash",
            generation_config={
                "temperature": 1,
                "top_p": 0.95,
                "top_k": 40,
                "max_output_tokens": 8192,
                "response_mime_type": "application/json",
            }
        )
        self.chat_session = self.code_model.start_chat(
            history=[
                {
                    "role": "user",
                    "parts": [
                        {
                            "text": "Generate a Project in React app. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use CSS files for styling instead of Tailwind CSS. Create separate CSS files for each component and import them. Do not use any CSS frameworks like Tailwind, Bootstrap, etc. Write custom CSS with modern styling techniques including flexbox, grid, animations, and responsive design.\n\nYou can use icons from the lucide-react library when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"icon\" />.\n\nAlso include a file tree view component in the sandbox that shows all the project files in a collapsible tree structure.\n\nYou can also use date-fns for date format and react-chartjs-2 chart, graph library when needed.\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    \"/App.css\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nEnsure the files field contains all created files including CSS files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './App.css';\\nexport default function App() {\\n  return (\\n    <div className='app-container'>\\n      <h1 className='app-title'>Hello, Custom CSS!</h1>\\n      <p className='app-description'>This is a live code editor with custom styling.</p>\\n    </div>\\n  );\\n}\"\n  },\n  \"/App.css\": {\n    \"code\": \".app-container {\\n  padding: 2rem;\\n  background-color: #f5f5f5;\\n  text-align: center;\\n  min-height: 100vh;\\n}\\n\\n.app-title {\\n  font-size: 2rem;\\n  font-weight: bold;\\n  color: #3b82f6;\\n  margin-bottom: 1rem;\\n}\\n\\n.app-description {\\n  margin-top: 0.5rem;\\n  color: #6b7280;\\n}\"\n  }\n}\n\nAdditionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n\nGuidelines:\n- When asked then only use this package to import, here are some packages available to import and use (date-fns, chart.js, react-chartjs-2) only when required\n- For placeholder images, please use https://archive.org/download/placeholder-image/placeholder-image.jpg\n- Add Emoji icons whenever needed to give good user experience\n- All designs should be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production\n- Use modern CSS techniques: flexbox, grid, custom properties (CSS variables), animations, transitions\n- Create responsive designs using media queries\n- Use semantic class names and organize CSS logically\n- Include hover effects and interactive states\n- Use box-shadow for depth and visual hierarchy\n- Proper spacing between elements and padding\n- Don't create src folder\n- After creating the project, update package.json file\n- Get images from web/internet but only working not broken\n- Do not download the images, only link to them in image tags"
                        }
                    ]
                },
                {
                    "role": "model",
                    "parts": [
                        {
                            "text": "{\n  \"projectTitle\": \"Dashboard App\",\n  \"explanation\": \"This React project creates a modern dashboard application using custom CSS for styling, offering a clean and responsive user interface. The project is structured with separate components for different sections of the dashboard, like the sidebar, header, and main content area. Each component has its own CSS file for modular styling. The dashboard showcases various data points and insights, presented using charts (react-chartjs-2) and formatted dates (date-fns). Lucide React icons are used to enhance the visual appeal and user experience. The layout includes a sidebar for navigation, a header for quick actions, and a main content area for displaying information. All components are designed with custom CSS using modern techniques like flexbox, grid, and responsive design principles.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport './App.css';\\nimport Sidebar from './components/Sidebar/Sidebar';\\nimport Header from './components/Header/Header';\\nimport MainContent from './components/MainContent/MainContent';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"app-container\\\">\\n      <Sidebar />\\n      <div className=\\\"main-wrapper\\\">\\n        <Header />\\n        <MainContent />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/App.css\": {\n      \"code\": \".app-container {\\n  display: flex;\\n  height: 100vh;\\n  background-color: #f5f5f5;\\n}\\n\\n.main-wrapper {\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n}\"\n    },\n    \"/components/Sidebar/Sidebar.js\": {\n      \"code\": \"import React from 'react';\\nimport './Sidebar.css';\\nimport { Home, Users, Settings, Mail, Bell } from 'lucide-react';\\n\\nfunction Sidebar() {\\n  return (\\n    <div className=\\\"sidebar\\\">\\n      <div className=\\\"sidebar-header\\\">\\n        <span className=\\\"sidebar-title\\\">Dashboard ðŸš€</span>\\n      </div>\\n      <div className=\\\"sidebar-content\\\">\\n        <ul className=\\\"sidebar-nav\\\">\\n          <li className=\\\"nav-item\\\">\\n            <Home className=\\\"nav-icon\\\" />\\n            <a href=\\\"#\\\" className=\\\"nav-link\\\">Home</a>\\n          </li>\\n          <li className=\\\"nav-item\\\">\\n            <Users className=\\\"nav-icon\\\" />\\n            <a href=\\\"#\\\" className=\\\"nav-link\\\">Users</a>\\n          </li>\\n          <li className=\\\"nav-item\\\">\\n            <Settings className=\\\"nav-icon\\\" />\\n            <a href=\\\"#\\\" className=\\\"nav-link\\\">Settings</a>\\n          </li>\\n          <li className=\\\"nav-item\\\">\\n            <Mail className=\\\"nav-icon\\\" />\\n            <a href=\\\"#\\\" className=\\\"nav-link\\\">Messages</a>\\n          </li>\\n          <li className=\\\"nav-item\\\">\\n            <Bell className=\\\"nav-icon\\\" />\\n            <a href=\\\"#\\\" className=\\\"nav-link\\\">Notifications</a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default Sidebar;\"\n    },\n    \"/components/Sidebar/Sidebar.css\": {\n      \"code\": \".sidebar {\\n  background-color: white;\\n  width: 16rem;\\n  flex-shrink: 0;\\n  border-right: 1px solid #e5e7eb;\\n}\\n\\n.sidebar-header {\\n  height: 4rem;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n}\\n\\n.sidebar-title {\\n  font-size: 1.125rem;\\n  font-weight: 600;\\n  color: #374151;\\n}\\n\\n.sidebar-content {\\n  padding: 1rem;\\n}\\n\\n.sidebar-nav {\\n  list-style: none;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\n.nav-item {\\n  display: flex;\\n  align-items: center;\\n  padding: 0.5rem 1rem;\\n  border-radius: 0.375rem;\\n  transition: background-color 0.2s;\\n}\\n\\n.nav-item:hover {\\n  background-color: #f3f4f6;\\n}\\n\\n.nav-icon {\\n  margin-right: 0.5rem;\\n  height: 1.25rem;\\n  width: 1.25rem;\\n  color: #6b7280;\\n}\\n\\n.nav-link {\\n  color: #374151;\\n  text-decoration: none;\\n}\"\n    },\n    \"/components/Header/Header.js\": {\n      \"code\": \"import React from 'react';\\nimport './Header.css';\\nimport { Search, Bell } from 'lucide-react';\\n\\nfunction Header() {\\n  return (\\n    <div className=\\\"header\\\">\\n      <div className=\\\"header-left\\\">\\n        <div className=\\\"search-container\\\">\\n          <input type=\\\"text\\\" placeholder=\\\"Search...\\\" className=\\\"search-input\\\" />\\n          <Search className=\\\"search-icon\\\" />\\n        </div>\\n      </div>\\n      <div className=\\\"header-right\\\">\\n        <Bell className=\\\"notification-icon\\\" />\\n        <div className=\\\"user-info\\\">\\n          <img src=\\\"https://archive.org/download/placeholder-image/placeholder-image.jpg\\\" alt=\\\"User Avatar\\\" className=\\\"user-avatar\\\" />\\n          <span className=\\\"user-name\\\">John Doe</span>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default Header;\"\n    },\n    \"/components/Header/Header.css\": {\n      \"code\": \".header {\\n  background-color: white;\\n  border-bottom: 1px solid #e5e7eb;\\n  height: 4rem;\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n  padding: 0 1rem;\\n}\\n\\n.header-left {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.search-container {\\n  position: relative;\\n}\\n\\n.search-input {\\n  border: 1px solid #d1d5db;\\n  border-radius: 0.375rem;\\n  padding: 0.5rem 2rem 0.5rem 2.5rem;\\n  outline: none;\\n  transition: border-color 0.2s;\\n}\\n\\n.search-input:focus {\\n  border-color: #3b82f6;\\n}\\n\\n.search-icon {\\n  position: absolute;\\n  left: 0.5rem;\\n  top: 50%;\\n  transform: translateY(-50%);\\n  color: #9ca3af;\\n}\\n\\n.header-right {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.notification-icon {\\n  margin-right: 1rem;\\n  height: 1.5rem;\\n  width: 1.5rem;\\n  color: #6b7280;\\n  cursor: pointer;\\n  transition: color 0.2s;\\n}\\n\\n.notification-icon:hover {\\n  color: #374151;\\n}\\n\\n.user-info {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.user-avatar {\\n  border-radius: 50%;\\n  height: 2rem;\\n  width: 2rem;\\n  margin-right: 0.5rem;\\n}\\n\\n.user-name {\\n  color: #374151;\\n  font-weight: 600;\\n}\"\n    },\n    \"/components/MainContent/MainContent.js\": {\n      \"code\": \"import React from 'react';\\nimport './MainContent.css';\\nimport { Calendar, Clock, ArrowRight, Star, Users } from 'lucide-react';\\nimport { format } from 'date-fns';\\nimport { Line } from 'react-chartjs-2';\\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\\n\\nfunction MainContent() {\\n  const now = new Date();\\n  const formattedDate = format(now, 'PPP');\\n  const formattedTime = format(now, 'h:mm a');\\n\\n  const chartData = {\\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\\n    datasets: [\\n      {\\n        label: 'Sales Data',\\n        data: [65, 59, 80, 81, 56, 55, 40, 68, 98, 76, 88, 90],\\n        fill: true,\\n        backgroundColor: 'rgba(75,192,192,0.2)',\\n        borderColor: 'rgba(75,192,192,1)',\\n        tension: 0.4\\n      },\\n    ],\\n  };\\n\\n  const chartOptions = {\\n    responsive: true,\\n    plugins: {\\n      legend: {\\n        display: false,\\n      },\\n      title: {\\n        display: false,\\n      },\\n    },\\n    scales: {\\n      y: {\\n        beginAtZero: true,\\n      },\\n    },\\n  };\\n\\n  return (\\n    <div className=\\\"main-content\\\">\\n      <div className=\\\"content-grid\\\">\\n        <div className=\\\"card date-time-card\\\">\\n          <Calendar className=\\\"card-icon blue\\\" />\\n          <div className=\\\"card-info\\\">\\n            <h2 className=\\\"card-title\\\">Today</h2>\\n            <p className=\\\"card-text\\\">{formattedDate}</p>\\n          </div>\\n          <div className=\\\"card-extra\\\">\\n            <Clock className=\\\"card-icon blue\\\" />\\n            <p className=\\\"card-text\\\">{formattedTime}</p>\\n          </div>\\n        </div>\\n\\n        <div className=\\\"card welcome-card\\\">\\n          <h2 className=\\\"card-title\\\">Welcome Back ðŸ‘‹</h2>\\n          <p className=\\\"card-text\\\">Check out today's updates!</p>\\n          <button className=\\\"btn btn-primary\\\">\\n            View Updates <ArrowRight className=\\\"btn-icon\\\" />\\n          </button>\\n        </div>\\n\\n        <div className=\\\"card rating-card\\\">\\n          <Star className=\\\"card-icon yellow\\\" />\\n          <div className=\\\"card-info\\\">\\n            <h2 className=\\\"card-title\\\">Ratings</h2>\\n            <p className=\\\"card-text\\\">4.8 / 5</p>\\n          </div>\\n        </div>\\n\\n        <div className=\\\"card users-card\\\">\\n          <Users className=\\\"card-icon green\\\" />\\n          <div className=\\\"card-info\\\">\\n            <h2 className=\\\"card-title\\\">Total Users</h2>\\n            <p className=\\\"card-text\\\">500+</p>\\n          </div>\\n        </div>\\n\\n        <div className=\\\"card image-card\\\">\\n          <img src=\\\"https://archive.org/download/placeholder-image/placeholder-image.jpg\\\" alt=\\\"Placeholder\\\" className=\\\"card-image\\\" />\\n          <p className=\\\"card-text\\\">A sample image to showcase content.</p>\\n        </div>\\n\\n        <div className=\\\"card chart-card\\\">\\n          <h2 className=\\\"card-title chart-title\\\">Monthly Sales</h2>\\n          <Line data={chartData} options={chartOptions} />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default MainContent;\"\n    },\n    \"/components/MainContent/MainContent.css\": {\n      \"code\": \".main-content {\\n  padding: 1.5rem;\\n  background-color: #f3f4f6;\\n  flex: 1;\\n  overflow-y: auto;\\n}\\n\\n.content-grid {\\n  display: grid;\\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\\n  gap: 1.5rem;\\n}\\n\\n@media (min-width: 768px) {\\n  .content-grid {\\n    grid-template-columns: repeat(2, 1fr);\\n  }\\n}\\n\\n@media (min-width: 1024px) {\\n  .content-grid {\\n    grid-template-columns: repeat(3, 1fr);\\n  }\\n}\\n\\n.card {\\n  background-color: white;\\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);\\n  border-radius: 0.375rem;\\n  padding: 1rem;\\n  transition: transform 0.2s, box-shadow 0.2s;\\n}\\n\\n.card:hover {\\n  transform: translateY(-2px);\\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);\\n}\\n\\n.date-time-card {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.card-icon {\\n  margin-right: 1rem;\\n  height: 2rem;\\n  width: 2rem;\\n}\\n\\n.card-icon.blue {\\n  color: #3b82f6;\\n}\\n\\n.card-icon.yellow {\\n  color: #eab308;\\n}\\n\\n.card-icon.green {\\n  color: #10b981;\\n}\\n\\n.card-info {\\n  flex: 1;\\n}\\n\\n.card-title {\\n  font-size: 1.125rem;\\n  font-weight: 600;\\n  color: #374151;\\n  margin: 0 0 0.25rem 0;\\n}\\n\\n.card-text {\\n  color: #6b7280;\\n  margin: 0;\\n}\\n\\n.card-extra {\\n  margin-left: auto;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n}\\n\\n.welcome-card {\\n  text-align: left;\\n}\\n\\n.btn {\\n  margin-top: 1rem;\\n  padding: 0.5rem 1rem;\\n  border: none;\\n  border-radius: 0.375rem;\\n  font-weight: 700;\\n  cursor: pointer;\\n  display: inline-flex;\\n  align-items: center;\\n  transition: background-color 0.2s;\\n}\\n\\n.btn-primary {\\n  background-color: #3b82f6;\\n  color: white;\\n}\\n\\n.btn-primary:hover {\\n  background-color: #1d4ed8;\\n}\\n\\n.btn-icon {\\n  margin-left: 0.5rem;\\n  height: 1rem;\\n  width: 1rem;\\n}\\n\\n.rating-card,\\n.users-card {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.image-card {\\n  text-align: center;\\n}\\n\\n.card-image {\\n  width: 100%;\\n  height: 12rem;\\n  object-fit: cover;\\n  border-radius: 0.375rem;\\n  margin-bottom: 0.5rem;\\n}\\n\\n.chart-card {\\n  min-height: 300px;\\n}\\n\\n.chart-title {\\n  margin-bottom: 1rem;\\n}\"\n    },\n    \"/package.json\": {\n      \"code\": \"{\\n  \\\"name\\\": \\\"dashboard-app\\\",\\n  \\\"private\\\": true,\\n  \\\"version\\\": \\\"0.1.0\\\",\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"^18.2.0\\\",\\n    \\\"react-dom\\\": \\\"^18.2.0\\\",\\n    \\\"lucide-react\\\": \\\"^0.303.0\\\",\\n    \\\"date-fns\\\": \\\"^2.29.3\\\",\\n    \\\"chart.js\\\": \\\"^4.4.1\\\",\\n    \\\"react-chartjs-2\\\": \\\"^5.2.0\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@vitejs/plugin-react\\\": \\\"^3.1.0\\\",\\n    \\\"vite\\\": \\\"^4.2.0\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"vite\\\",\\n    \\\"build\\\": \\\"vite build\\\",\\n    \\\"serve\\\": \\\"vite preview\\\"\\n  },\\n  \\\"browserslist\\\": [\\n    \\\">0.2%\\\",\\n    \\\"not dead\\\",\\n    \\\"not ie <= 11\\\",\\n    \\\"not op_mini all\\\"\\n  ]\\n}\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/App.css\",\n    \"/components/Sidebar/Sidebar.js\",\n    \"/components/Sidebar/Sidebar.css\",\n    \"/components/Header/Header.js\",\n    \"/components/Header/Header.css\",\n    \"/components/MainContent/MainContent.js\",\n    \"/components/MainContent/MainContent.css\",\n    \"/package.json\"\n  ]\n}"
                        }
                    ]
                }
            ]
        )
    
    def send_message(self, prompt: str):
        """Send a message to the AI model and return the response"""
        try:
            response = self.chat_session.send_message(prompt)
            return response
        except Exception as e:
            raise Exception(f"Error sending message to AI model: {str(e)}")

# Create a singleton instance
GenAICode = GenAICodeClass()